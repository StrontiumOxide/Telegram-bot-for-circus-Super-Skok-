from telebot import TeleBot
from telebot.types import Message, CallbackQuery
from variable import token, photo_calendar, photo_intro, photo_participiant, photo_creator, photo_administrator, list_creator, list_admin, list_app, list_parts
from classes import Participant, Worker, Administrator, Creator
import keyboards as kb

list_admin.append(Administrator(user_id=1172020269, name="–î–µ–Ω–∏—Å", surname="–î–æ—Ä–æ—Ñ–µ–µ–≤", status="–¢–≤–æ—Ä–µ—Ü"))
list_creator.append(Creator(user_id=1172020269, name="–î–µ–Ω–∏—Å", surname="–î–æ—Ä–æ—Ñ–µ–µ–≤", status="–¢–≤–æ—Ä–µ—Ü"))

# list_admin.append(Administrator(user_id=1102575118, name="–°–µ—Ä–≥–µ–π", surname="–ó–æ—Ä–∏–Ω", status="–¢–≤–æ—Ä–µ—Ü"))
# list_creator.append(Creator(user_id=1102575118, name="–°–µ—Ä–≥–µ–π", surname="–ó–æ—Ä–∏–Ω", status="–¢–≤–æ—Ä–µ—Ü"))

bot = TeleBot(token)

@bot.message_handler(commands=["start"])
def start(message: Message):
    chat_id = message.chat.id

    variable = list(map(lambda x: x.user_id, list_creator))
    if chat_id in variable:
        text = f"""
–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –°–æ–∑–¥–∞—Ç–µ–ª—å - {message.chat.first_name} {message.chat.last_name}!üéÜ
–í—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å, —á—Ç–æ –ø–æ–∂–µ–ª–∞–µ—Ç–µ –Ω—É–∂–Ω—ã–º –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ!‚ò†Ô∏è
–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏!üòç
–ò–¥–∏—Ç–µ –∂–µ –∏ –≤–µ—Ä—à–∏—Ç–µ –≤–∞–∂–Ω—ã–µ –¥–µ–ª–∞!üòé
"""
        bot.send_photo(chat_id, photo=photo_creator, caption=text)
        menu(message)
        return

    variable = list(map(lambda x: x.user_id, list_admin))
    if chat_id in variable:
        text = f"""
–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - {message.chat.first_name} {message.chat.last_name}!üëÆüèª‚Äç‚ôÇÔ∏è
–í–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ—Ä—è–¥–æ–∫ –≤ –¥–∞–Ω–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏!üëÅ
–ë—É–¥—å—Ç–µ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –∫–æ –≤—Å–µ–º –∏ –≤—Å—è!üë∂üèªüëßüèªüßíüèºüë©üèª‚Äçü¶∞
–î–µ—Ä–∑–∞–π—Ç–µ! –í–ø–µ—Ä—ë–¥!üëäüèª
"""
        bot.send_photo(chat_id, photo=photo_administrator, caption=text)
        menu(message)
        return

    variable = list(map(lambda x: x.user_id, list_parts))
    if chat_id in variable:
        text = f"""
–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —É—á–∞—Å—Ç–Ω–∏–∫ - {message.chat.first_name} {message.chat.last_name}!üñê
–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Ü–∏—Ä–∫–∞ "–°—É–ø–µ—Ä-–°–∫–æ–∫"!üé™
–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–æ–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∏ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é –∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º!üôèüèª
–ü—Ä–æ–≤–æ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å –ø–æ–ª—å–∑–æ–π!üïî
"""
        bot.send_photo(chat_id, photo=photo_participiant, caption=text)
        menu(message)
        return

    else:
        text = """
–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü!ü•∏
–Ø —è–≤–ª—è—é—Å—å –ø–æ–º–æ—â–Ω–∏–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ü–∏—Ä–∫–∞ "–°—É–ø–µ—Ä-–°–∫–æ–∫"!üé™
–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º!üòí
–ï—Å–ª–∏ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –¥–∞–Ω–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, —Ç–æ –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É!üòú
"""
        bot.send_photo(chat_id, photo=photo_intro, caption=text, reply_markup=kb.kb_start_ing)


# @bot.message_handler(commands=["menu"])
def menu(message: Message):
    chat_id = message.chat.id

    variable = list(map(lambda x: x.user_id, list_creator))
    if chat_id in variable:
        bot.send_message(chat_id, "–°–æ–∑–¥–∞—Ç–µ–ª—å, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—é!üõ†", reply_markup=kb.kb_administator)
        return

    variable = list(map(lambda x: x.user_id, list_admin))
    if chat_id in variable:
        bot.send_message(chat_id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—é!üõ†", reply_markup=kb.kb_administator)
        return

    variable = list(map(lambda x: x.user_id, list_parts))
    if chat_id in variable:
        bot.send_message(chat_id, "–£—á–∞—Å—Ç–Ω–∏–∫, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—é!üõ†",
                         reply_markup=kb.kb_participiant)
        return


@bot.callback_query_handler(lambda call: call.data in ["ing_yes", "ing_no"])
def status(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    bot.delete_message(chat_id, callback.message.message_id)
    if callback.data == "ing_yes":
        text = f"""
–£–≤–∞–∂–∞–µ–º—ã–π {callback.message.chat.first_name} {callback.message.chat.last_name}, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–∞—è —É –≤–∞—Å —Ä–æ–ª—å –≤ –¥–∞–Ω–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏!üòà
"""
        bot.send_message(chat_id, text)
        bot.register_next_step_handler(callback.message, status_2)

    elif callback.data == "ing_no":
        bot.send_message(chat_id, "–í—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ!ü§®")


def status_2(message: Message):     
    chat_id = message.chat.id
    bot.send_message(chat_id, "–•–æ—Ä–æ—à–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞. /start")
    list_parts.append(Participant(
        user_id=chat_id,
        name=message.chat.first_name,
        surname=message.chat.last_name,
        status=message.text))


@bot.callback_query_handler(lambda call: call.data in ["my_show", "show_calendar", "send_letter_admin", "order_sertificate"])
def def_participiant(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    bot.delete_message(chat_id, callback.message.message_id)
    if callback.data == "my_show":
        bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–π", reply_markup=kb.kb_back)

    elif callback.data == "show_calendar":
        bot.send_photo(chat_id, photo=photo_calendar, caption="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –º–µ—Å—è—Ü", reply_markup=kb.kb_back)

    elif callback.data == "send_letter_admin":
        bot.send_message(chat_id, "–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=kb.kb_back)

    elif callback.data == "order_sertificate":
        bot.send_message(chat_id, "–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=kb.kb_back)
    

@bot.callback_query_handler(lambda call: call.data == "back")
def back(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    bot.delete_message(chat_id, callback.message.message_id)
    menu(callback.message)
    

@bot.callback_query_handler(lambda call: call.data in ["speech", "calendar", "mail"])
def def_administration(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    bot.delete_message(chat_id, callback.message.message_id)
    if callback.data == "speech":
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å", reply_markup=kb.kb_administator_speech)

    elif callback.data == "calendar":
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å", reply_markup=kb.kb_administator_calendar)

    elif callback.data == "mail":
        bot.send_message(chat_id, "–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", reply_markup=kb.kb_back)


@bot.callback_query_handler(lambda call: call.data in ["set_show", "set_calendar"])
def def_administration_2(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    bot.delete_message(chat_id, callback.message.message_id)
    if callback.data == "set_show":
        bot.send_message(chat_id, "–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞", reply_markup=kb.kb_back)

    elif callback.data == "set_calendar":
        bot.send_message(chat_id, "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—èüì∑", reply_markup=kb.kb_back)
        bot.register_next_step_handler(callback.message, def_photo)


def def_photo(message: Message):
    chat_id = message.chat.id
    try:
        message.photo[0].file_id
    except TypeError:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞! –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=kb.kb_back)
    else:
        global photo_calendar
        photo_calendar = message.photo[0].file_id
        bot.send_message(chat_id, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", reply_markup=kb.kb_back)


@bot.message_handler(content_types=["text"])
def echo(message: Message):
    bot.send_message(message.chat.id, "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é! /start")


bot.polling(non_stop=True)
