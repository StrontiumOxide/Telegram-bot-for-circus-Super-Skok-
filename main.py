from telebot import TeleBot
from telebot.types import Message, CallbackQuery
import variable as v
import keyboards as kb
import functions as func

from pprint import pprint

bot = TeleBot(v.token)

    # –î–µ—Ñ–∏–Ω–∏—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã "—Å—Ç–∞—Ä—Ç"
@bot.message_handler(commands=["start"])
def start(message: Message):
    func.starting_loads()
    chat_id = message.chat.id
    str_chat_id = str(chat_id)

    if str(chat_id) in v.list_creators:
        text = f"""
–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –°–æ–∑–¥–∞—Ç–µ–ª—å - {v.list_creators[str_chat_id].name} {v.list_creators[str_chat_id].surname}!üéÜ
–í—ã –º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å, —á—Ç–æ –ø–æ–∂–µ–ª–∞–µ—Ç–µ –Ω—É–∂–Ω—ã–º –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ!‚ò†Ô∏è
–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏!üòç
–ò–¥–∏—Ç–µ –∂–µ –∏ –≤–µ—Ä—à–∏—Ç–µ –≤–∞–∂–Ω—ã–µ –¥–µ–ª–∞!üòé
"""
        bot.send_photo(chat_id, photo=v.photo_creator, caption=text)
        menu(message)


    elif str(chat_id) in v.list_administrators:
        text = f"""
–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä - {v.list_administrators[str_chat_id].name} {v.list_administrators[str_chat_id].surname}!üëÆüèª‚Äç‚ôÇÔ∏è
–í–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ—Ä—è–¥–æ–∫ –≤ –¥–∞–Ω–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏!üëÅ
–ë—É–¥—å—Ç–µ —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã –∫–æ –≤—Å–µ–º –∏ –≤—Å—è!üë∂üèªüëßüèªüßíüèºüë©üèª‚Äçü¶∞
–î–µ—Ä–∑–∞–π—Ç–µ! –í–ø–µ—Ä—ë–¥!üëäüèª
"""
        bot.send_photo(chat_id, photo=v.photo_administrator, caption=text)
        menu(message)


    elif str(chat_id) in v.list_participants:
        text = f"""
–î–æ–±—Ä—ã–π –¥–µ–Ω—å, —É—á–∞—Å—Ç–Ω–∏–∫ - {v.list_participants[str_chat_id].name} {v.list_participants[str_chat_id].surname}!üñê
–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —Ü–∏—Ä–∫–∞ "–°—É–ø–µ—Ä-–°–∫–æ–∫"!üé™
–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–æ–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∏ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é –∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º!üôèüèª
–ü—Ä–æ–≤–æ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Å –ø–æ–ª—å–∑–æ–π!üïî
"""
        bot.send_photo(chat_id, photo=v.photo_participiant, caption=text)
        menu(message)

    elif str(chat_id) in v.list_applications:
        text = f"""
{v.list_applications[str_chat_id].name} {v.list_applications[str_chat_id].surname}, –≤—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞—è–≤–∫—É!üòÖ
–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –µ—â—ë –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–ª –≤—Ö–æ–¥—è—â–∏–µ –∑–∞—è–≤–∫–∏.üòî
"""
        bot.send_photo(chat_id, photo=v.photo_application, caption=text)

    else:
        text = """
–î–æ–±—Ä—ã–π –¥–µ–Ω—å, –Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü!ü•∏
–Ø —è–≤–ª—è—é—Å—å –ø–æ–º–æ—â–Ω–∏–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Ü–∏—Ä–∫–∞ "–°—É–ø–µ—Ä-–°–∫–æ–∫"!üé™
–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º!üòí
–ï—Å–ª–∏ –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –¥–∞–Ω–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, —Ç–æ –ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É!üòú
"""
        bot.send_photo(chat_id, photo=v.photo_intro, caption=text, reply_markup=kb.kb_start_ing)


# @bot.message_handler(commands=["menu"])
def menu(message: Message):
    chat_id = message.chat.id

    if str(chat_id) in v.list_creators:
        bot.send_message(chat_id, "–°–æ–∑–¥–∞—Ç–µ–ª—å, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—é!üõ†", 
                         reply_markup=kb.kb_administator)

    if str(chat_id) in v.list_administrators:
        bot.send_message(chat_id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—é!üõ†", 
                         reply_markup=kb.kb_administator)

    if str(chat_id) in v.list_participants or chat_id in v.list_applications:
        bot.send_message(chat_id, "–£—á–∞—Å—Ç–Ω–∏–∫, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—é!üõ†",
                         reply_markup=kb.kb_participiant)


@bot.callback_query_handler(lambda call: call.data in ["ing_yes", "ing_no"])
def status(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    bot.delete_message(chat_id, callback.message.message_id)
    if callback.data == "ing_yes":
        text = f"""
–£ –≤–∞—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–º—è: "{callback.message.chat.first_name}" –∏ —Ñ–∞–º–∏–ª–∏—è: "{callback.message.chat.last_name}"?üßê
–ï—Å–ª–∏ —ç—Ç–æ —Ç–∞–∫, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–∞". –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.üôÇ
(–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤).üòú
"""
        bot.send_message(chat_id, text, reply_markup=kb.kb_yes_reply)
        bot.register_next_step_handler(callback.message, status_2)

    elif callback.data == "ing_no":
        bot.send_message(chat_id, "–í—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ!ü§®")


def status_reload(message: Message):
    chat_id = message.chat.id
    text = f"""
–£ –≤–∞—Å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–º—è: "{message.chat.first_name}" –∏ —Ñ–∞–º–∏–ª–∏—è: "{message.chat.last_name}"?üßê
–ï—Å–ª–∏ —ç—Ç–æ —Ç–∞–∫, —Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–î–∞". –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.üôÇ
(–ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤).üòú
"""
    bot.send_message(chat_id, text, reply_markup=kb.kb_yes_reply)
    bot.register_next_step_handler(message, status_2)


def status_2(message: Message):     
    chat_id = message.chat.id

    if message.text == "–î–∞":
        name = message.chat.first_name
        surname = message.chat.last_name
    else:
        try: 
            name, surname= message.text.split()
        except ValueError:
            bot.send_message(chat_id, "–û–®–ò–ë–ö–ê!‚ùå\n–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö!")
            status_reload(message)
            return
        except AttributeError:
            bot.send_message(chat_id, "–û–®–ò–ë–ö–ê!‚ùå\n–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö!")
            status_reload(message)
            return
    text = f"""
–•–æ—Ä–æ—à–æ, {surname} {name}, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞!üòÅ
–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –∫–∞–∫–æ–π —Å—Ç–∞—Ç—É—Å –≤—ã –∏–º–µ–µ—Ç–µ –≤ –¥–∞–Ω–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.üë¶üèº
"""
    bot.send_message(chat_id, text, reply_markup=kb.kb_remove)
    bot.register_next_step_handler(message, status_3, name, surname)
    

def status_3(message: Message, name: str, surname: str):
    chat_id = message.chat.id
    text = f"""
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!üëç
–ñ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!ü§°
/start
"""
    
    user_dict = {
            "user_id": str(chat_id),
            "t_name": message.chat.first_name,
            "t_surname": message.chat.last_name,
            "name": name,
            "surname": surname,
            "status": "–ó–∞—è–≤–∫–∞",
            "role": message.text
        }

    func.update_info(user_dict)
    bot.send_message(chat_id, text)
    

@bot.callback_query_handler(lambda call: call.data in ["my_show", "show_calendar", "send_letter_admin", "order_sertificate", "documente"])
def def_participiant(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    bot.delete_message(chat_id, callback.message.message_id)
    if callback.data == "my_show":
        bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è–π‚ùå", reply_markup=kb.kb_back)

    elif callback.data == "show_calendar":
        bot.send_photo(chat_id, photo=v.photo_calendar, caption="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –º–µ—Å—è—Üüí¨", reply_markup=kb.kb_back)

    elif callback.data == "send_letter_admin":
        bot.send_message(chat_id, "–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ‚ùå", reply_markup=kb.kb_back)

    elif callback.data == "order_sertificate":
        bot.send_message(chat_id, "–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ‚ùå", reply_markup=kb.kb_back)

    elif callback.data == "documente":

        text = f"""
–î–æ–∫—É–º–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ pptxüìÑ
–í –¥–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞üìë
–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ‚ùóÔ∏è
"""
        try:
            with open(file="files/documente.pptx", mode='rb') as f:
                file_info = f.read()
        except Exception:
            bot.send_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –µ–≥–æ –Ω–µ –≤—ã–ª–æ–∂–∏–ª‚ùå", reply_markup=kb.kb_back)
        else:
            bot.send_document(chat_id=chat_id, document=file_info, caption=text, 
                              visible_file_name="–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è.pptx", reply_markup=kb.kb_back)
    

@bot.callback_query_handler(lambda call: call.data == "back")
def back(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    bot.delete_message(chat_id, callback.message.message_id)
    menu(callback.message)
    

@bot.callback_query_handler(lambda call: call.data in ["speech", "calendar", "mail", "update", "role"])
def def_administration(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    bot.delete_message(chat_id, callback.message.message_id)
    if callback.data == "speech":
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—åüí≠", reply_markup=kb.kb_administator_speech)

    elif callback.data == "calendar":
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—åüí≠", reply_markup=kb.kb_administator_calendar)

    elif callback.data == "mail":
        bot.send_message(chat_id, "–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ‚ùå", reply_markup=kb.kb_back)

    elif callback.data == "update":
        func.starting_loads()
        bot.send_message(chat_id, "–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã‚òëÔ∏è", reply_markup=kb.kb_back)

    elif callback.data == "role":
        status, role = func.role(callback.message)
        text = f"""
–í–∞—à —Å—Ç–∞—Ç—É—Å: {status}üòé
–í–∞—à–∞ —Ä–æ–ª—å: {role}ü§©
"""
        bot.send_message(chat_id, text, reply_markup=kb.kb_back)



@bot.callback_query_handler(lambda call: call.data in ["set_show", "set_calendar"])
def def_administration_2(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    bot.delete_message(chat_id, callback.message.message_id)
    if callback.data == "set_show":
        bot.send_message(chat_id, "–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞‚ùå", reply_markup=kb.kb_back)

    elif callback.data == "set_calendar":
        bot.send_message(chat_id, "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—èüì∑", reply_markup=kb.kb_back)
        bot.register_next_step_handler(callback.message, def_photo)


def def_photo(message: Message):
    chat_id = message.chat.id
    try:
        message.photo[0].file_id
    except TypeError:
        bot.send_message(chat_id, "–û—à–∏–±–∫–∞! –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!‚ùå", reply_markup=kb.kb_back)
    else:
        global photo_calendar
        photo_calendar = message.photo[0].file_id
        bot.send_message(chat_id, "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!‚òëÔ∏è", reply_markup=kb.kb_back)


@bot.message_handler(content_types=["text"])
def echo(message: Message):
    bot.send_message(message.chat.id, "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é!‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")


bot.polling(non_stop=True)
